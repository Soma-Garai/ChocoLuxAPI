// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;

namespace ChocoLuxAPI.Models;

public partial class AppDbContext : IdentityDbContext<UserModel, IdentityRole, string>
{
    public AppDbContext(DbContextOptions<AppDbContext> options)
        : base(options)
    {
    }

    //public virtual DbSet<Role> Roles { get; set; }

    //public virtual DbSet<RoleClaim> RoleClaims { get; set; }

    //public virtual DbSet<User> Users { get; set; }

    //public virtual DbSet<UserClaim> UserClaims { get; set; }

    //public virtual DbSet<UserLogin> UserLogins { get; set; }

    //public virtual DbSet<UserRole> UserRoles { get; set; }

    //public virtual DbSet<UserToken> UserTokens { get; set; }

    public virtual DbSet<Category> tblCategories { get; set; }

    public virtual DbSet<Orders> tblOrders { get; set; }

    public virtual DbSet<OrderDetails> tblOrderDetails { get; set; }

    public virtual DbSet<Product> tblProducts { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<User>(entity =>
        {
            entity.Property(e => e.FirstName).IsRequired();
            entity.Property(e => e.LastName).IsRequired();
        });
        //configuring the primary key's -
        modelBuilder.Entity<IdentityUserLogin<string>>()
           .HasKey(l => new { l.LoginProvider, l.ProviderKey });

        modelBuilder.Entity<IdentityUserRole<string>>(userRole =>
        {
            userRole.HasKey(ur => new { ur.UserId, ur.RoleId });
        });
        modelBuilder.Entity<IdentityUserToken<string>>(userToken =>
        {
            userToken.HasKey(ut => new { ut.UserId, ut.LoginProvider, ut.Name });
        });
       
        modelBuilder.Entity<Category>(entity =>
        {
            entity.HasKey(e => e.CategoryId);

            entity.Property(e => e.CategoryName).IsRequired();
        });

        modelBuilder.Entity<Orders>(entity =>
        {
            entity.HasKey(e => e.OrderId);

            entity.Property(e => e.UserId).IsRequired();
        });

        modelBuilder.Entity<OrderDetails>(entity =>
        {
            entity.HasKey(e => e.OrderItemId);

            entity.HasIndex(e => e.OrderId, "IX_tblOrderDetails_OrderId");

            entity.HasOne(d => d.Orders).WithMany(p => p.OrderDetails).HasForeignKey(d => d.OrderId);
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity.HasKey(e => e.product_id);

            entity.HasIndex(e => e.CategoryId, "IX_tblProducts_CategoryId");

            entity.HasOne(d => d.Category).WithMany(p => p.tblProducts).HasForeignKey(d => d.CategoryId);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}

//modelBuilder.Entity<UserLogin>(entity =>
//{
//    entity.HasKey(e => new { e.LoginProvider, e.ProviderKey });
//});

//modelBuilder.Entity<UserRole>(entity =>
//{
//    entity.HasKey(e => new { e.UserId, e.RoleId });
//});

//modelBuilder.Entity<UserToken>(entity =>
//{
//    entity.HasKey(e => new { e.UserId, e.LoginProvider, e.Name });
//});